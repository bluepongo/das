问题反馈:
全体:
1. 排序import, 使用go fmt
2. api/v1/metadata的AddXXX()函数里校验传入参数时, 应校验数据库对应表里所有非空的字段, id, del_flag, create_time, last_update_time除外
3. api/v1/metadata的Update()函数仅需校验传入参数长度大于0即可, 无需校验所有字段
4. xxx_service.go: service需要获取数据库对应表里所有非空的字段
5. test/metadata下创建对应的.http文件, 填写测试用例
6. GetXXXByID(): 修改实参
resp.ResponseNOK(c, message.ErrMarshalService, err.Error())
7. AddXXX(): 修改实参
resp.ResponseNOK(c, message.ErrMetadataAddEnv, fields[envNameStruct], err.Error())
resp.ResponseNOK(c, message.ErrMarshalService, err.Error())
8. UpdateXXXByID(): 修改实参
resp.ResponseNOK(c, message.ErrMarshalService, err.Error())
9. info.go
InfoMetadataAddMYSQLServer: env_name: %s要改成代表该实体的字段
DebugMetadataAddDb: db_name, owner_id, env_id改成db_name, cluster_id, cluster_type
appsystem分开写
10. 初始化Entity时, 除了id, del_flag, create_time, last_update_time以外, 非空字段的值使用constant.DefaultRandomInt, constant.DefaultRandomString, constant.DefaultRandomTime作为默认值, mysql客户端会将拥有这些值的字段赋值为null
11. 初始化Entity时, 建议使用NewXXXWithMap(fields)函数, 参考env_service.go里的Create()



一. app system
1. app_system_entity.go
结构体成员变量顺序与数据库字段顺序保持一致
GetLevel(),GetOwnerID(),GetOwnerGroup()这三个函数不需要, 可通过Get()函数来达到相同目的
2. app_system_repository.go:
注释//后留一个空格
Transaction()函数没有注释
sql语句: 逗号(,)后留一个空格
3. app_system_service.go:
Delete()函数的注释拼写错误
4. rest-api.v1.app-system.http
补充api调用测试

二. db
整体:
将Db改为DB, Id改为ID, 保持统一风格
用结构体简写作为方法接收指针的变量名称
db_repository.go:
GetID()应以db_name, cluster_id, cluster_type作为where条件, 这三个字段组成了唯一索引
Create()应使用除了id, del_flag, create_time, last_update_time以外的所有非空字段
Update()应使用除了id, del_flag, create_time, last_update_time以外的所有非空字段
db_service.go:
Create()应使用除了id, del_flag, create_time, last_update_time以外的所有字段, 先用所有非空字段来进行初始化entity, 之后允许空的字段, 应先校验是否传入了该字段, 如果传入了, 则以在创建完entity之后设置该成员变量
Update()应使用除了id, del_flag, create_time, last_update_time以外的所有字段

三. middleware
1. middleware_cluster_entity_test.go:
middlewareClusterStuctEqual() 函数名称拼写错误
2. middleware_server_repository.go:
方法接收变量有的是er, 有的是msr
GetID()函数用ip和端口来获取, 因为ip+端口是一个非空的唯一索引
Update()方法未更新del_flag字段, 导致无法删除server

注: t_meta_middleware_server_info表的cluster_id_middleware字段名称改为cluster_id, 已在代码里进行了修改
3. middleware_server_service.go:
多个方法注释有误

四. monitor system
整体: 
将mS改为monitor system
方法接收者的变量变成未修改

1. api/v1/monitor_system.go
AddMonitorSystem(): 需要校验所有非空且没有默认值的字段

2. mS_repository.go
GetID(): 建议用ip端口作为where条件
Update(): 应使用除了id, del_flag, create_time, last_update_time以外的所有字段


五. mysql
整体: MYSQLXXX改为MySQLXXX, 以保持风格统一

1. api/v1/metadata/mysql_cluster.go
UpdateMySQLClusterByID(): 当且仅当全部可变更字段均为空时, 才可以直接返回错误, 否则应允许修改其他字段
2. api/v1/metadata/mysql_server.go
AddMySQLServer(): 需要校验所有可变更字段
UpdateMySQLServerByID(): 需要校验所有可变更字段
3. mysql_server_entity.go:
mci改为msi
增加server name
4. mysql_server_repository.go
er改为msr
Create(): 增加server name
Update(): 增加server name


六. user
整体:
t_meta_user_info表的domain_account改为account_name, entity的名称也要做相应修改
sql: 字段名称或?后的逗号后面加个空格, 保持风格统一
1. api/v1/metadata/user.go
AddUser(): 需要校验所有非空且没有默认值的字段
UpdateUserByID(): 当且仅当全部可变更字段均为空时, 才可以直接返回错误, 否则应允许修改其他字段
2. user_service.go
注释Userironment拼写错误
Create(): 仅校验非空字段
3. user_entity.go
成员变量顺序建议与数据库表的字段顺序一致
无需写除接口实现以外的get函数
4. user_repository.go
GetID(): 应使用唯一索引作为where条件, 例如email
    






























